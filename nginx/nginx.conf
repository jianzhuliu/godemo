## main 段配置信息，全局有效

## 运行用户，默认为nginx, 可以指定组 user nginx jianzhu; 用户名 nginx; 组是 jianzhu
user  nginx;  

## 进程数，一般和 cpu 核数一样
worker_processes  auto; 

## 错误日志及存放目录
error_log  /var/log/nginx/error.log notice; 

## 服务启动时 pid 存放位置
pid        /var/run/nginx.pid; 

#########################
## 每个 worker 子进程的最大连接数量
#worker_rlimit_nofile 20480; 

## worker 子进程异常退出后的 core 文件，用于记录分析问题
#worker_rlimit_core 50M;
#working_directory /data/nginx/core;

## 每个 worker 子进程与物理核心绑定 4个物理核心，4个 worker 子进程 
## 避免同一个 worker 子进程在不同 cpu 核心上切换，导致缓存失效，降低性能.
## 但其并不能真正的避免进程切换
#worker_cpu_affinity 0001 0010 0100 1000;

## 指定 worker 子进程的 nice 值，用于调整运行 nginx 的优先级，通常设定为负值
## 默认进程的优先级为120，值越小越优先 120 -10 =110 就是最终优先级
#worker_priority -10; 

## worker 子进程优雅退出时的超时时间
#worker_shutdown_timeout 5s;

## worker 子进程计时器精度，调整时间间隔越大，系统调用越小，有利于性能提升
#timer_resolution 100ms;

## 运行模式，默认 on 后台运行，off 前台用于测试
#daemon off;
##################

## events 段配置信息
## 服务器与用户的网络连接
events {
	##使用 epoll 的 IO 模型,不配置系统会自动选择
	##可选值 select epoll poll eventport kqueue
	#use epoll;  
	
	## 每个子进程允许的最大并发数
    worker_connections  1024;  
	
	## 是否打开负载均衡互斥锁，默认off
	#accept_mutex on;
}

## http 段配置信息
## 代理、缓存、日志定义等
http {
	## 文件扩展名与类型映射表
    include       /etc/nginx/mime.types;
	
	## 默认文件类型
    default_type  application/octet-stream;

	## 日志格式化模式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

	## 访问日志存放位置
    access_log  /var/log/nginx/access.log  main;

	## 开启高效传输模式，零拷贝
    sendfile        on;
	
	## 减少网络报文段的数量
    #tcp_nopush     on;
	#tcp_nodelay 	on;

	## 保持连接的时间，即超时时间，单位秒
    keepalive_timeout  65;

	## 开启 gzip 压缩
    #gzip  on;

	## 加载其它配置文件
    #include /etc/nginx/conf.d/*.conf;
	
	## server 段配置信息
	## 虚拟主机，可以有多个
	server {
		## 监听端口
		listen       80;
		
		## 域名
		server_name  localhost;

		#access_log  /var/log/nginx/host.access.log  main;

		## location 段配置信息
		location / {
			## 网站根目录
			root   /usr/share/nginx/html;
			
			## 默认首页文件
			index  index.html index.htm;
			
			## 禁止访问的ip地址，可以为 all 
			#deny 192.168.126.71;
			
			## 允许访问的ip地址，可以为 all 
			#allow 192.168.126.71;
		}

		#error_page  404              /404.html;

		# redirect server error pages to the static page /50x.html
		#
		error_page   500 502 503 504  /50x.html;
		location = /50x.html {
			root   /usr/share/nginx/html;
		}

		# proxy the PHP scripts to Apache listening on 127.0.0.1:80
		#
		#location ~ \.php$ {
		#    proxy_pass   http://127.0.0.1;
		#}

		# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
		#
		#location ~ \.php$ {
		#    root           html;
		#    fastcgi_pass   127.0.0.1:9000;
		#    fastcgi_index  index.php;
		#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
		#    include        fastcgi_params;
		#}

		# deny access to .htaccess files, if Apache's document root
		# concurs with nginx's one
		#
		#location ~ /\.ht {
		#    deny  all;
		#}
	}

	## server 可以支持多个
	server {
		## 监听端口
		listen       80;
		
		## 域名
		server_name  www.example.com;

		## 别名
		#当访问 www.example.com/image/1.png 时，实际在服务器找的路径是 /usr/share/nginx/html/static/image/1.png
		location /image {
			#root /usr/share/nginx/html/static;
			alias /usr/share/nginx/html/static/image/;
		}
		
		#################匹配模式 begin
		## 精确匹配
		# 只有当访问 www.example.com/match_all/ 时才会匹配到/usr/share/nginx/html/match_all/index.html
		location = /match_all/ {
			root /usr/share/nginx/html;
			index index.html;
		}

		## 匹配到即停止搜索  ^~
		# 当访问 www.example.com/bbs/ 时会匹配上 /usr/share/nginx/html/bbs/index.html
		location ^~ /bbs/ {
			root /usr/share/nginx/html;
			index index.html index.htm;
		}

		## 正则匹配，区分大小写 ~
		# 当访问 www.example.com/1.jpg 等路径时会去 /usr/share/nginx/images/1.jpg 找对应的资源
		location ~ \.(jpeg|jpg)$ {
			root /usr/share/nginx/images;
		}

		## 正则匹配，不区分大小写 ~*
		# 当访问 www.example.com/2.PNG 等路径时会去 /usr/share/nginx/images/2.png 找对应的资源
		location ~* \.(png|svg)$ {
			root /usr/share/nginx/images;
		}
		#################匹配模式 end
		
		######### 反斜线 begin
		## 不带 /, 则先找 /usr/share/nginx/html/test/index.html, 然后找 /usr/share/nginx/html/test 文件
		location /test {
			root /usr/share/nginx/html/;
			index index.html;
		}
		
		## 带 /, 则自会找 /usr/share/nginx/html/test/index.html
		location /test/ {
			root /usr/share/nginx/html/;
			index index.html
		}
		######### 反斜线 end
		
		
		######## return bein 
		location /test1/ {
			return 404;  ## 直接返回状态码
		}
		
		location /test2/ {
			return 404 "page not found";  ## 状态码 + 一段描述
		}
		
		location /test3/ {
			return 404 /bbs;  ## 状态码 + 重定向地址
		}
		
		location /test4/ {
			return https://www.baidu.com;  ## 返回重定向地址
		}
		
		######## return end 
		
		
		######## rewrite begin 
		# redirect 返回302临时重定向
		# permanent 返回301永久重定向
		# break 直接使用重写后的 URL ，不再匹配其它 location 中语句
		
		location /search1 {
			rewrite ^/(.*) https://www.baidu.com redirect;
		}
		
		location /search2 {
			rewrite /search2/(.*) /search/$1;
		}
		
		location /search {
		}
		
		location /images {
			rewrite /images/(.*\.jpg)$ /pic/$1; # $1是前面括号(.*\.jpg)的反向引用
		}
		
		location /pic {
			root /usr/share/nginx/html/static;
		}
		
		######## rewrite end 
		
		
		######## if 指令 begin 
		# = 或者 != 不等于
		# ~ 正则匹配
		# ! ~ 非正则匹配
		# -f 或者 ! -f 文件存在或者不存在
		# -d 或者 ! -d 目录存在或者不存在
		# -f 或者 ! -f 文件、目录、符号链接等存在或者不存在
		# -x 或者 ! -x 文件可执行或者不可执行
		
		location / {
			if ( $uri = "/if" ){
				rewrite (.*) /pic/ break;
			}
		}
		
		######## if 指令 end 
		
		######## autoindex begin 
		#用户请求以 / 结尾时，列出目录结构，用于快速搭建静态资源下载网站
		
		location /download/ {
			root /usr/share/nginx/html;
			
			autoindex on; 
			
			## 修改为off，以KB、MB、GB显示文件大小，默认为on，以bytes显示
			autoindex_exact_size on;
			
			## 以html的方式进行格式化，可选参数有 html | json | xml
			autoindex_format html;
			
			## on 显示的时间为服务器时间, 默认 off ，显示 GMT 时间
			autoindex_localtime off;
		}
		######## autoindex end 
	}

}
